"""
멘토링 한 내용들을 두서없이 나열한 것입니다.
"""


"""
---------------------
리습 및 언어 관련
---------------------
"""
- SICP, HtDP 에 존재하는 용어 및 개념들. 숙지하는것이 좋단.
- Programming Language는 Computer에 돌아가도록 하는 언어가 아니라, 
  언어가 먼저 존재하고, 그것을 처리해주는 것이 Computer일 뿐이다.
- 구현해야할 것은 크게 두 부분
 1. Parser
   : 문자열을 단순 파싱해서 트리형태로 return
   : 리스트의 리스트 등도 모두 리턴할 수 있어야 한다.
   : Lexing을 먼저 해야한다.
     : Lexing이란 파싱된 Data에 Type까지 붙여진 하나의 Form을 만들어내는 것을 의미
   : 결론적으로 syntax를 분석해서 Forms를 return 한다.

   * 예외처리는 매우 중요하다. 사용자가 어디에서 어떤실수를 했는지 정확하게 보여준다.
 
 2. Evaluator
   : Forms를 받아서 실제로 evaluation한다.
   : Type Check후에 
       Symbol일 경우 
         special form Check
	   맞으면 각 form 에 맞게 evaluation
	   아니면 env에서 찾아서 object를 return

       나머지 타입은 그대로 리턴
       대신 리스트인경우는 재귀적으로 호출할 수 있도록 한다.

** type
symbol
number( int, float )
list
string

** special form
1. define
2. if 
3. quote
4. lambda
5. let

** initial environment
1. eval
2. car, cdr
3. 4칙연산 + %(modulo)
4. = < >
5. t, f, not
6. nil, null?


- 2가지 종류의 Lisp Type
 1. Lisp 1
   함수와 변수가 같은 environment의 name table 이용하는 lisp
   함수와 구분이 없으므로 그냥 잡아다가 쓸수 있다.
   Python, Scheme등의 언어
 2. Lisp 2
   함수와 변수는 다른 name table이용
   compile타이밍에 () <- 꼴은 함수콜로 간주하기 때문에 함수, 변수의 혼용을 잡을수있다
   테이블의 크기가 작기 때문에 더 빠르다

- Special Form을 정의하는 방법
 1. f-expression
   우리가 구현하는 리습에서 하는 방식
   define의 symbol을 evaluation한 후에 대입하는 방식
 2. macro
   코드 그대로 저장되되, 치환되어서 코드 그대로가 저장되는 방식

- Terminology
 (+ 1 2) : function call
 (define a b): macro expansion or f-expression call
 => 합쳐서function call 이라고 부른다.

"""
----------------------
기타 사항들
----------------------
"""
- 여러 이야기..
 1. Hackers News 가 정말 좋은 RSS Reference
 2. Computer Science의 두가지 관점
   2.1 Data Structure, Algorithm등등... 수학적 연산에 대한 연구
   2.2 PL에 대한 연구, 어떻게 표현할 것인가
 3. gEvent, Coroutine, ...

- 프로그래밍 할 때 반드시 고려해야 할 사항들
 1. 항상 environment를 잘 갖춘다.
   1.1 version 관리 system
   1.2 자동 test
   1.3 자동 build
 2. 항상 언어의 Convention을 찾아서 맞추도록 한다.
   python 같은 경우에는 PEP-8이 있으므로 참고해서 표준을 따르도록 한다.
 3. Comment를 규격화 해서 달도록한다.
   python 같은 경우에 Sphinx라는 것이 있어서 doc를 웹으로 잘 보여주도록 하는 
   interface도 있으므로 참고한다.

   기본적으로 예제, description, parameter등등에 대한 설명이 있어야하며,
   잘 되어있는 Sphinx예제를 보고 문서화를 하도록 한다.
 4. 프로그래밍 실력을 올리는데는?
   언어 습득 ..
   Domain지식 - 웹개발, 게임개발..등 다양한 분야에 개발해보는것

   즉 언어하나, 도메인 하나 정해서 2*2 매트릭스로 만들어서 
   하나는 알고, 하나는 모르는 것을 선택해서 진행해 나간다.
